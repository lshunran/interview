前端安全防范

1.XSS
可执行代码注入攻击，可分为持久型和非持久型

持久型：
持久型也就是攻击的代码被服务端写入进数据库中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。
例如：评论等

非持久型：
一般通过修改 URL 参数的方式加入攻击代码，诱导用户访问链接从而进行攻击。如果过页面需要用URL参数作为页面内容，如果不进行过滤就会遭受攻击。

防范方法：
对引号、尖括号、斜杠进行转义
对于富文本编辑框，可以采取白名单的方式过滤，有现在的插件可以使用

2.CSP
内容安全协议
CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。
我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。兼容性不错。

开启CSP
设置 HTTP Header 中的 Content-Security-Policy
设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy">

1.设置HTTP头
只允许加载本站资源
Content-Security-Policy: default-src ‘self’
只允许加载 HTTPS 协议图片
Content-Security-Policy: img-src https://*
允许加载任何来源框架
Content-Security-Policy: child-src 'none'

3.CSRF攻击
CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。

1.Get 请求不对数据进行修改
2.不让第三方网站访问到用户 Cookie
3.阻止第三方网站请求接口
4.请求时附带验证信息，比如验证码或者 Token

SameSite
可以对 Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。
Http-only
可确保cookie不被恶意脚本所获取

验证 Referer
对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。

Token或者验证码
服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。

